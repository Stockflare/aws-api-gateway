swagger: '2.0'
info:
  version: 1.0.0
  title: 'Stockflare AWS API Gateway'
paths:
  /users/login:
    post:
      description: |
        Login with user-id and password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              username:
                type: string
              token:
                type: string
              expires:
                type: integer
              refresh_token:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Invalid Login
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/login
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/assume:
    post:
      description: |
        Assume an AWS Role
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
      responses:
        '201':
          description: Successful response
          schema:
            properties:
              id:
                type: string
              key:
                type: string
              token:
                type: string
              expires:
                type: integer
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Invalid Login
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/assume
        requestTemplates:
          application/json:
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/refresh:
    post:
      description: |
        Login with a refresh token
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              username:
                type: string
              token:
                type: string
              expires:
                type: integer
              refresh_token:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Invalid Login
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/refresh
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/register:
    post:
      description: |
        Register with user-id and password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              username:
                type: string
              token:
                type: string
              expires:
                type: integer
              refresh_token:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '409':
          description: User logged in
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: Could not create user
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/register
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/change:
    put:
      description: |
        Change user details
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              username:
                type: object
              password:
                type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              username:
                type: string
              token:
                type: string
              expires:
                type: integer
              refresh_token:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Invalid Login
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/change
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/lost:
    get:
      description: |
        Request lost password token
      parameters:
        - name: username
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/lost
        requestParameters:
          integration.request.querystring.username: "method.request.querystring.username"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/delete:
    get:
      description: |
        Request delete user token
      parameters:
        - name: username
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/delete
        requestParameters:
          integration.request.querystring.username: "method.request.querystring.username"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    delete:
      description: |
        Delete user with valid token
      parameters:
        - name: token
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/delete
        requestParameters:
          integration.request.querystring.token: "method.request.querystring.token"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/recover:
    post:
      description: |
        Recover password with valid token
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
              password:
                type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              username:
                type: string
              token:
                type: string
              expires:
                type: integer
              refresh_token:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Invalid Login
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users-api.{{getenv "HOSTED_ZONE"}}/recover
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /directory:
    put:
      description: |
        Properties associated with a particular identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identities:
                type: array
                items:
                  type: string
              keys:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://directory-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    post:
      description: |
        Create or update a set of proeprties for an identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identity:
                type: string
              properties:
                type: object
      responses:
        '201':
          description: All properties for the identity have been created
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: An attempt to update a locked property for the identity was made
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '409':
          description: A duplicate entry for a property exists within the directory already
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://directory-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "properties": $input.json('$.properties')
            }
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    delete:
      description: |
        Delete a set of proeprties for an identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identity:
                type: string
              keys:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: All keys for the identity have been deleted
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://directory-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "keys": $input.json('$.keys')
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /directory/identity:
    put:
      description: |
        Properties associated with a particular identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identity:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://directory-api.{{getenv "HOSTED_ZONE"}}/identity
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId"
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /search:
    put:
      description: |
        Search for Instruments with search term
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              term:
                type: string
              conditions:
                type: object
              sorting:
                type: object
              select:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Api-Total:
              type: "string"
            X-Api-Count:
              type: "string"
            X-Api-Current:
              type: "string"
            X-Api-Next:
              type: "string"
            X-Api-Pages:
              type: "string"
            X-Api-Per-Page:
              type: "string"
            X-Api-Previous:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://search-api.{{getenv "HOSTED_ZONE"}}/search
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Api-Total,X-Api-Count,X-Api-Current,X-Api-Next,X-Api-Pages,X-Api-Per-Page,X-Api-Previous'"
              method.response.header.X-Api-Total: "integration.response.header.x-api-total"
              method.response.header.X-Api-Count: "integration.response.header.x-api-count"
              method.response.header.X-Api-Current: "integration.response.header.x-api-current"
              method.response.header.X-Api-Next: "integration.response.header.x-api-next"
              method.response.header.X-Api-Pages: "integration.response.header.x-api-pages"
              method.response.header.X-Api-Per-Page: "integration.response.header.x-api-per-page"
              method.response.header.X-Api-Previous: "integration.response.header.x-api-previous"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Api-Total,X-Api-Count,X-Api-Current,X-Api-Next,X-Api-Pages,X-Api-Per-Page,X-Api-Previous'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /search/filter:
    put:
      description: |
        Filter all Instruments with conditions
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              conditions:
                type: object
              sorting:
                type: object
              select:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Api-Total:
              type: "string"
            X-Api-Count:
              type: "string"
            X-Api-Current:
              type: "string"
            X-Api-Next:
              type: "string"
            X-Api-Pages:
              type: "string"
            X-Api-Per-Page:
              type: "string"
            X-Api-Previous:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://search-api.{{getenv "HOSTED_ZONE"}}/filter
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Api-Total,X-Api-Count,X-Api-Current,X-Api-Next,X-Api-Pages,X-Api-Per-Page,X-Api-Previous'"
              method.response.header.X-Api-Total: "integration.response.header.x-api-total"
              method.response.header.X-Api-Count: "integration.response.header.x-api-count"
              method.response.header.X-Api-Current: "integration.response.header.x-api-current"
              method.response.header.X-Api-Next: "integration.response.header.x-api-next"
              method.response.header.X-Api-Pages: "integration.response.header.x-api-pages"
              method.response.header.X-Api-Per-Page: "integration.response.header.x-api-per-page"
              method.response.header.X-Api-Previous: "integration.response.header.x-api-previous"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Api-Total,X-Api-Count,X-Api-Current,X-Api-Next,X-Api-Pages,X-Api-Per-Page,X-Api-Previous'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /search/aggregate:
    put:
      description: |
        Aggregate Instrument data with conditions
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              conditions:
                type: object
              type:
                type: string
              field:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://search-api.{{getenv "HOSTED_ZONE"}}/aggregate
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /peers:
    get:
      description: |
        Request Instruments that are peers of SIC
      parameters:
        - name: sic
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: Bad request - Not found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://peers-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.sic: "method.request.querystring.sic"
        requestTemplates:
          application/json:
        responses:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /instruments:
    put:
      description: |
        Retrieve Instrument details based on SIC and other fields
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              ric:
                type: string
              repo_no:
                type: string
              isin:
                type: string
              sic:
                type: string
              sics:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://instruments-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /historical:
    put:
      description: |
        Retrieve Instrument historical data based on SIC and other fields
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              sics:
                type: string
              after:
                type: integer
              before:
                type: integer
              select:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://historical-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /currency:
    get:
      description: |
        Currency Exchange rates
      parameters:
        - name: from
          in: query
          required: true
          type: string
        - name: to
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: integer
        - name: per_page
          in: query
          required: false
          type: integer
        - name: before
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://currency-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.from: "method.request.querystring.from"
          integration.request.querystring.to: "method.request.querystring.to"
          integration.request.querystring.after: "method.request.querystring.after"
          integration.request.querystring.per_page: "method.request.querystring.per_page"
          integration.request.querystring.before: "method.request.querystring.before"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /sectors:
    put:
      description: |
        Retrieve Sectors based on ID or code
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              ids:
                type: string
              codes:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://sectors-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /sectors/parent:
    get:
      description: |
        Get parent sector for a Sector Code
      parameters:
        - name: code
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://sectors-api.{{getenv "HOSTED_ZONE"}}/parent
        requestParameters:
          integration.request.querystring.code: "method.request.querystring.code"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /sectors/siblings:
    get:
      description: |
        Get siblings sectors for a Sector Code
      parameters:
        - name: code
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://sectors-api.{{getenv "HOSTED_ZONE"}}/siblings
        requestParameters:
          integration.request.querystring.code: "method.request.querystring.code"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /sectors/children:
    get:
      description: |
        Get children sectors for a Sector Code
      parameters:
        - name: code
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://sectors-api.{{getenv "HOSTED_ZONE"}}/children
        requestParameters:
          integration.request.querystring.code: "method.request.querystring.code"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /exchanges:
    put:
      description: |
        Get Exchanges based on Code, Id, Region or Country
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              codes:
                type: array
                items:
                  type: string
              ids:
                type: array
                items:
                  type: string
              regions:
                type: array
                items:
                  type: string
              countries:
                type: array
                items:
                  type: string
              major:
                type: boolean
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://exchanges-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /alerts:
    get:
      description: |
        Time-series based triggered security alerts
      parameters:
        - name: sic
          in: query
          required: true
          type: string
        - name: after
          in: query
          required: true
          type: integer
        - name: before
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://alerts-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.sic: "method.request.querystring.sic"
          integration.request.querystring.after: "method.request.querystring.after"
          integration.request.querystring.before: "method.request.querystring.before"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /blocks:
    put:
      description: |
        Create or update a block
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              watchlist_id:
                type: string
              ids:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: No Found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://blocks-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "watchlist_id": $input.json('$.watchlist_id'),
              "ids": $input.json('$.ids')
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    post:
      description: |
        Create or update a block
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              id:
                type: string
              watchlist_id:
                type: string
              sic:
                type: string
              quantity:
                type: integer
              price:
                type: number
              purchased:
                type: integer
      responses:
        '201':
          description: Block has been updated / created
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: Block update made by wrong user
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: Block not found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://blocks-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "id": $input.json('$.id'),
              "watchlist_id": $input.json('$.watchlist_id'),
              "sic": $input.json('$.sic'),
              "quantity": $input.json('$.quantity'),
              "price": $input.json('$.price'),
              "purchased": $input.json('$.purchased')
            }
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    delete:
      description: |
        Delete a block
      parameters:
        - name: id
          in: query
          required: true
          type: string
        - name: identity
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://blocks-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId"
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /blocks/properties:
    post:
      description: |
        Create or update block properties
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              id:
                type: string
              properties:
                type: object
      responses:
        '201':
          description: Block properties has been updated / created
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: Block update made by wrong user
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: Block not found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://blocks-api.{{getenv "HOSTED_ZONE"}}/properties
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "id": $input.json('$.id'),
              "properties": $input.json('$.properties')
            }
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /portfolios:
    put:
      description: |
        Create or update a portfolio
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              ids:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: No Found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://portfolios-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "ids": $input.json('$.ids')
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    post:
      description: |
        Create a portfolios
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              type:
                type: string
      responses:
        '201':
          description: portfolio has been updated / created
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: portfolio update made by wrong user
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: portfolio not found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://portfolios-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "type": $input.json('$.type')
            }
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    delete:
      description: |
        Delete a portfolio
      parameters:
        - name: id
          in: query
          required: true
          type: string
        - name: identity
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://portfolios-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId"
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /portfolios/properties:
    post:
      description: |
        Create or update portfolio properties
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              id:
                type: string
              properties:
                type: object
      responses:
        '201':
          description: portfolios properties has been updated / created
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: portfolios update made by wrong user
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '400':
          description: portfolios not found
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://portfolios-api.{{getenv "HOSTED_ZONE"}}/properties
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "id": $input.json('$.id'),
              "properties": $input.json('$.properties')
            }
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /price:
    get:
      description: |
        Price quote system
      parameters:
        - name: rics
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://price-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.rics: "method.request.querystring.rics"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /fx:
    get:
      description: |
        Get Exchange Rate
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://fx-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /fx/symbols:
    get:
      description: |
        Get Currency Symbols
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://fx-api.{{getenv "HOSTED_ZONE"}}/symbols
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade:
    get:
      description: |
        Get Nonce token
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
            X-Replay-Nonce:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL,X-Replay-Nonce'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
              method.response.header.X-Replay-Nonce: "integration.response.header.X-Replay-Nonce"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/user/login:
    post:
      description: |
        Login to a trading account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              broker:
                type: string
              username:
                type: string
              password:
                type: string
      responses:
        '201':
          description: Valid login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/user/login
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "broker": $input.json('$.broker'),
              "username": $input.json('$.username'),
              "password": $input.json('$.password')
            }
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/user/refresh:
    post:
      description: |
        Refresh and keep alive session token
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
      responses:
        '201':
          description: Refreshed or noop
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/user/refresh
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "token": $input.json('$.token')
            }
        responses:
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/user/accounts:
    put:
      description: |
        Get list of accounts
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              foo:
                type: string
      responses:
        '200':
          description: Got accounts
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/user/accounts
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId"
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/user/links:
    put:
      description: |
        Get list linked accounts
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              foo:
                type: string
      responses:
        '200':
          description: Got linked accounts
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/user/links
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId"
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/user/verify:
    post:
      description: |
        Verify a login with security answer
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              broker:
                type: string
              token:
                type: string
              answer:
                type: string
      responses:
        '200':
          description: Got linked accounts
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/user/verify
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "broker": $input.json('$.broker'),
              "token": $input.json('$.token'),
              "answer": $input.json('$.answer')
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/user/logout:
    delete:
      description: |
        Logout brokerage account
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
      responses:
        '200':
          description: Logged out account
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/user/logout
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "token": $input.json('$.token')
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/order/positions:
    put:
      description: |
        Get positions for an account
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
              account:
                type: string
              page:
                type: integer
      responses:
        '200':
          description: Got linked accounts
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
            X-Total-Pages:
              type: "string"
            X-Next-Page:
              type: "string"
            X-Previous-Page:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
            X-Total-Pages:
              type: "string"
            X-Next-Page:
              type: "string"
            X-Previous-Page:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
            X-Total-Pages:
              type: "string"
            X-Next-Page:
              type: "string"
            X-Previous-Page:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/order/positions
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "token": $input.json('$.token'),
              "account": $input.json('$.account'),
              "page": $input.json('$.page')
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
              method.response.header.X-Total-Pages: "integration.response.header.X-Total-Pages"
              method.response.header.X-Next-Page: "integration.response.header.X-Next-Page"
              method.response.header.X-Previous-Page: "integration.response.header.X-Previous-Page"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
              method.response.header.X-Total-Pages: "integration.response.header.X-Total-Pages"
              method.response.header.X-Next-Page: "integration.response.header.X-Next-Page"
              method.response.header.X-Previous-Page: "integration.response.header.X-Previous-Page"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
              method.response.header.X-Total-Pages: "integration.response.header.X-Total-Pages"
              method.response.header.X-Next-Page: "integration.response.header.X-Next-Page"
              method.response.header.X-Previous-Page: "integration.response.header.X-Previous-Page"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
              method.response.header.X-Total-Pages: "integration.response.header.X-Total-Pages"
              method.response.header.X-Next-Page: "integration.response.header.X-Next-Page"
              method.response.header.X-Previous-Page: "integration.response.header.X-Previous-Page"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/order:
    put:
      description: |
        Get all the user orders
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
      responses:
        '200':
          description: Got Orders
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/order
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "token": $input.json('$.token')
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/order/preview:
    post:
      description: |
        Preview a new order
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
              broker:
                type: string
              account:
                type: string
              action:
                type: string
              quantity:
                type: integer
              ticker:
                type: string
              expiration:
                type: string
              type:
                type: string
              stop_price:
                type: number
              limit_price:
                type: number
      responses:
        '200':
          description: Got Orders
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/order/preview
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "token": $input.json('$.token'),
              "broker": $input.json('$.broker'),
              "account": $input.json('$.account'),
              "action": $input.json('$.action'),
              "quantity": $input.json('$.quantity'),
              "ticker": $input.json('$.ticker'),
              "expiration": $input.json('$.expiration'),
              "type": $input.json('$.type'),
              "stop_price": $input.json('$.stop_price'),
              "limit_price": $input.json('$.limit_price')
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /trade/order/execute:
    post:
      description: |
        Place a previously previewed a new order
      parameters:
        - name: "X-Replay-Nonce"
          in: "header"
          required: false
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            properties:
              token:
                type: string
              broker:
                type: string
              account:
                type: string
      responses:
        '200':
          description: Order exeuted
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '403':
          description: Invlaid Login
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
        '500':
          description: Failure
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Expose-Headers:
              type: "string"
            X-Session-Refreshed:
              type: "string"
            X-Session-TTL:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://trade-api.{{getenv "HOSTED_ZONE"}}/order/execute
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "token": $input.json('$.token'),
              "broker": $input.json('$.broker'),
              "account": $input.json('$.account')
            }
        requestParameters:
          integration.request.header.X-Replay-Nonce: "method.request.header.X-Replay-Nonce"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'X-Session-Refreshed,X-Session-TTL'"
              method.response.header.X-Session-Refreshed: "integration.response.header.X-Session-Refreshed"
              method.response.header.X-Session-TTL: "integration.response.header.X-Session-TTL"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token,X-Session-TTL,X-Session-Refreshed,X-Replay-Nonce'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /i18n:
    get:
      description: |
        Get internationalizations
      parameters:
        - name: locale
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://i18n-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.locale: "method.request.querystring.locale"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /explore:
    get:
      description: |
        Retrieve an exhaustive list of all explore categories
      parameters:
        - name: identity
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://explore-api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.identity: "method.request.querystring.identity"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    post:
      description: |
        Create an explore category
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              conditions:
                type: object
      responses:
        '200':
          description: Category for the identity have been created
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '403':
          description: Error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '500':
          description: Error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://explore-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "conditions": $input.json('$.conditions')
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    delete:
      description: |
        Delete explore category for an indetity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              uuid:
                type: string
      responses:
        '200':
          description: Category has been deleted
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://explore-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "uuid": $input.json('$.uuid')
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /translate:
    get:
      description: |
        Get list of supported translation language codes
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '500':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Error
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://translate-api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /translate/instrument:
    put:
      description: |
        Get Translated Instrument Data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              sics:
                type: array
                items:
                  type: string
              language:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        '500':
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          description: Error
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://translate-api.{{getenv "HOSTED_ZONE"}}/instrument
        requestTemplates:
          application/json:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
    options:
      parameters: []
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Max-Age:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'180'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-User-Agent,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "__passthrough__"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
