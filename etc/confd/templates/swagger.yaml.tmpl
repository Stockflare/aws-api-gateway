swagger: '2.0'
info:
  version: 1.0.0
  title: 'Stockflare AWS API Gateway'
produces:
  - application.json
paths:
  /users/login:
    post:
      description: |
        Login with user-id and password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              token:
                type: string
              expires:
                type: integer
        '403':
          description: Invalid Login
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users.api.{{getenv "HOSTED_ZONE"}}/login
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
          4\\d{2}:
            statusCode: "403"
  /users/register:
    post:
      description: |
        Register with user-id and password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              identity:
                type: string
              token:
                type: string
              expires:
                type: integer
        '409':
          description: User logged in
        '400':
          description: Could not create user
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://users.api.{{getenv "HOSTED_ZONE"}}/register
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
          4\\d{2}:
            statusCode: "409"
          4\\d{2}:
            statusCode: "400"
  /users/lost:
    get:
      description: |
        Request lost password token
      parameters:
        - name: username
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://users.api.{{getenv "HOSTED_ZONE"}}/lost
        requestParameters:
          integration.request.querystring.username: "method.request.querystring.username"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /directory:
    put:
      description: |
        Properties associated with a particular identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identities:
                type: array
                items:
                  type: string
              keys:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://directory.api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
    post:
      description: |
        Create or update a set of proeprties for an identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identity:
                type: string
              properties:
                type: array
                items:
                  type: object
      responses:
        '201':
          description: All properties for the identity have been created
        '403':
          description: An attempt to update a locked property for the identity was made
        '409':
          description: A duplicate entry for a property exists within the directory already
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: post
        uri: {{getenv "HTTP_PROTOCOL"}}://directory.api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "properties": $input.json('$.properties')
            }
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json:
          4\\d{2}:
            statusCode: "403"
          4\\d{2}:
            statusCode: "401"
    delete:
      description: |
        Delete a set of proeprties for an identity
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              identity:
                type: string
              keys:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: All keys for the identity have been deleted
      x-amazon-apigateway-auth:
        type: aws_iam
      x-amazon-apigateway-integration:
        type: http
        httpMethod: delete
        uri: {{getenv "HTTP_PROTOCOL"}}://directory.api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json: |
            {
              "identity": "$context.identity.cognitoIdentityId",
              "keys": $input.json('$.keys')
            }
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /search:
    put:
      description: |
        Search for Instruments with search term
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              term:
                type: string
              conditions:
                type: object
              sorting:
                type: object
              select:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://search.api.{{getenv "HOSTED_ZONE"}}/search
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /search/filter:
    put:
      description: |
        Filter all Instruments with conditions
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              conditions:
                type: object
              sorting:
                type: object
              select:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://search.api.{{getenv "HOSTED_ZONE"}}/filter
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /search/aggregate:
    put:
      description: |
        Aggregate Instrument data with conditions
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              conditions:
                type: object
              type:
                type: string
              field:
                type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://search.api.{{getenv "HOSTED_ZONE"}}/aggregate
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /peers:
    get:
      description: |
        Request Instruments that are peers of SIC
      parameters:
        - name: sic
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: array
              items:
                type: object
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://peers.api.{{getenv "HOSTED_ZONE"}}/
        requestParameters:
          integration.request.querystring.sic: "method.request.querystring.sic"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /peers/aggregate:
    get:
      description: |
        Aggregate a field for all peers of a SIC
      parameters:
        - name: sic
          in: query
          required: true
          type: string
        - name: type
          in: query
          required: true
          type: string
        - name: field
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: get
        uri: {{getenv "HTTP_PROTOCOL"}}://peers.api.{{getenv "HOSTED_ZONE"}}/aggregate
        requestParameters:
          integration.request.querystring.sic: "method.request.querystring.sic"
          integration.request.querystring.type: "method.request.querystring.type"
          integration.request.querystring.field: "method.request.querystring.field"
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
  /instruments:
    put:
      description: |
        Retrieve Instrument details based on SIC and other fields
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              ric:
                type: string
              repo_no:
                type: string
              isin:
                type: string
              sic:
                type: string
              sics:
                type: array
                items:
                  type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              type: object
      x-amazon-apigateway-auth:
        type: none
      x-amazon-apigateway-integration:
        type: http
        httpMethod: put
        uri: {{getenv "HTTP_PROTOCOL"}}://instruments.api.{{getenv "HOSTED_ZONE"}}/
        requestTemplates:
          application/json:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json:
